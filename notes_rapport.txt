Intro : mise en contexte.

Liste des hacks faits :
  - Le connecteur de la batterie avait une polarisation opposée à celui du
    chargeur -> Utilisation de câbles Dupont pour résoudre le pb (ça marche,
    photos du problème, et de la tension au multimètre).
  - La bibliothèque "RadioHead" utilisée pour gérer le LoRaWAN dépend de
    "stdatomic", on doit changer le code source de "RadioHead" pour en sourcer
    l'implémentation correcte pour Arduino  vs. ESP (montrer le code).
  - Les périphériques nécessitant plus d'entrées-sorties qu'il y en a sur
    l'ESP32, le code active et désactive les périphériques à la volée dans le
    code. Il est par ailleurs impossible d'utiliser un retour série pour du
    debug. -> Illustration avec les pins de l'ESP32-CAM, expliquer le blocage
    d'une partie par la Carte SD (utilisation du mode 1-bit pour limiter
    l'effet) et par la caméra.

Tests sur platine de prototypage :
Protocole : 
- Test des régulateurs de tension : utilisation des potentiomètres pour régler
  leur sortie, mesures au multimètre pour s'assurer au premier ordre d'un bon
  output, puis à l'oscillo pour caractériser le bruit/les imperfections
- Alimentation de l'ESP32-CAM seule, code initial de clignotage du flash pour
  s'assurer du bon fonctionnement.
- Inclusion des périphériques 1 à 1 en commencant par un code de test propre
  à chaque périphérique puis un code les utilisant tous (ce code là deviens au
  final le code de vol)
- Debug si nécessaire et vérification des tensions I/O au multimètre/à l'oscillo.

Insérer photos des montages.
Une fois le prototypage terminé, travail sur une PCB, selon les contraintes
mécaniques (détails Damien).
Conception PCB :
Schematic -> PCB (design préliminaire 2D) -> GrabCAD/SnapEDA -> Modèle 3D
(Insérer les docs)
Tests d'autonomie et de portée de la télem.



